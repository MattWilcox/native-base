@layer reset, base, design, utilities;
/*
	# SCREEN-CORE.CSS

		- This file is _always_ loaded, it's referenced in the <head> of all pages.
		- It should therefor contain styles that are _very likely_ to be used on the majority of pages, and avoid styles for things that are unlikely to appear on many pages. Those styles should belong in their own stylesheet, and be loaded only when needed.

	# CSS Cascade Layers

		NOTES:
		Layers should be declared before all other CSS.

		REFERENCES:
		- https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers
		- https://css-tricks.com/css-cascade-layers/

		Reset:
			Undo inconsistent default browsers styles, so there are no differences between them.

		Base:
			Base styles for "default" elements and "core level" markup. E.g., Fonts, Headings, how a <p> or <em> etc look by default, or how a basic form looks - without any component or page specific over-rides.

		Design:
			The actual design of the site. How components look, how things are laid out, page specific styling, etc.

		Utilities:
			For the rare case where it makes sense, utility classes should override everything else. e.g., heading styles should _not_ be mapped to HTML heading level, but it's handy to map to a class given how stable heading style is over viewport sizes.
*/

@layer reset {
	/* Use a sensible CSS box model */
	*, *:before, *:after {
		box-sizing : border-box;
	}

	/* Remove inconsistent default margins, paddings, borders. Make everything inherit font styles. */
	* {
		margin: 0; padding: 0; border-width: 0;
		font-size: 100%; font: inherit;
		background-repeat: no-repeat;
	}

	html {
		text-size-adjust: none;              /* Text size only controlled by font-size */
		-webkit-font-smoothing: antialiased; /* This is a good default in a modern Retina world */
		scroll-behavior: smooth;             /* Default to smooth scrolling (disabled conditionally later, for a11y) */
	}

	/* Any CSS that would remove the bullet or number indicators of a listâ€™s items will also remove the semantics.
	   REFERENCE: https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html

	   So here, we only allow visually removing a bullet if the markup explicitly adds back the list semantics through having a role='list' property value */
	:where(ul, ol)[role='list'] {
		list-style: none;
	}
	:where(ul, ol):not([role='list']) { /* Ensure any lists without an explicit role attribute display their default bullet styling */
		margin-inline-start: 2em;
	}

	/* form resets */
	:where(button, input, select, textarea) {
		color: inherit;
		font-family: inherit;
		font-style: inherit;
		font-weight: inherit;
	}
	:where(button) {
		appearance: none;                         /* Don't use the OS's theming */
		display: inline-block;
		cursor: pointer;
		touch-action: manipulation;               /* faster taps as long as we're not zooming etc */
		-webkit-tap-highlight-color: transparent; /* No, Safari */
	}
	:where([disabled]) { /* if anything is marked as disabled, the cursor should reflect that status */
		cursor: not-allowed;
	}

	/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
	@media (prefers-reduced-motion) {
		html:focus-within {
			scroll-behavior: auto;
		}

		*,
		*::before,
		*::after {
			animation-duration:        0.01ms !important;
			animation-iteration-count: 1      !important;
			transition-duration:       0.01ms !important;
			scroll-behavior:           auto   !important;
		}
	}

	/* Don't collapse these into one ruleset. When a browser doesn't recognise a selector it discards the whole ruleset.
	   By using vendor selectors in one ruleset you guarantee nothing will be applied */
		::-webkit-selection { background-color: hsl( var(--brand-colour, 100 20% 20%) ); color: #fff; }
		::-moz-selection    { background-color: hsl( var(--brand-colour, 100 20% 20%) ); color: #fff; }
		::selection         { background-color: hsl( var(--brand-colour, 100 20% 20%) ); color: #fff; }

		::-webkit-input-placeholder { font-size: 1em; }
		input:-moz-placeholder      { font-size: 1em; }
		::placeholder               { font-size: 1em; }

		/* kill default HTML5 styling on webkit */
		input[type=search],
		input[type=submit] {
			-webkit-appearance : none;
		}
		input[type="search"]::-webkit-search-decoration,
		input[type="search"]::-webkit-search-cancel-button {
			display: none;
		}
}

@layer base {
	/* # Font Imports */
		/* .e.,g...

		@font-face {
			font-family: 'Poppins';
			src: url('/design-assets/fonts/subset-Poppins-Regular.woff2') format('woff2');
			font-weight: normal; font-style: normal;
			font-display: swap;
		}
		*/

	/* # Focus management */
		*:focus { /* fallback for older browsers that don't support 'focus-visible' */
			outline: max(2px, 0.2em) solid currentColor !important;
			outline-offset: 0.25em; z-index: 1000;
		}

		@supports selector(:focus-visible) {
			*:focus { /* Do nothing with 'focus', as that activates on click as well as keyboard */
				outline: none !important;
				text-decoration: none;
			}

			*:focus-visible { /* Let the browser decide when things "should" have focus - e.g., keyboard, not click */
				outline: max(2px, 0.2em) solid currentColor !important;
				outline-offset: 0.25em; z-index: 1000;
			}
		}

	/* # CSS Custom Properties

		NOTES:
		Experimenting with "Custom property values with defaults"
		https://lea.verou.me/2021/10/custom-properties-with-defaults/

		:root {
			--variable-name: value;
		}

		element {
			--_variable-name: var(--variable-name, fallback-if-no-such-variable);
			property: var(--_variable-name);
		}
	*/
		:root {
			/* Generic measures */
			--gap:            var(--font-size-base);
			--letter-spacing: 0.025em;

			/* measures intended for "row" layout rather than component layout */
			--row-width-max:           1280px;
			--row-padding-block:       var(--gap);
			--row-padding-inline:      var(--gap);

			/* Animation speeds */
			--very-fast:               0.15s;
			--fast:                    0.3s;
			--slow:                    0.6s;
			--very-slow:               1.3s;

			/*
				Text sizes based on the Modular Scale, with fluid base size.
				See https://modern-fluid-typography.vercel.app/ for the fluid base generation.
				This is set so that it's 16px at 320px, to 20px at 1280px.
			*/
			--font-size-root:          14px; /* Required for the font-size base. Goes from 16px at mobile to 20px desktop */
			--font-size-base:          clamp(1.143rem, 0.5vw + 1rem, 1.429rem);

			/* The other font sizes are then relative to the base font as it's scaled at the moment */
			--font-size-diminished:    calc( 0.875 * var(--font-size-base) ); /* e.g., footer text or footnote */
			--font-size-promoted:      calc( 1.2   * var(--font-size-base) ); /* e.g., an intro paragraph */
			--font-size-heading-small: calc( 1.4   * var(--font-size-base) );
			--font-size-heading:       calc( 1.6   * var(--font-size-base) );
			--font-size-heading-large: calc( 2     * var(--font-size-base) );

			--font-family-primary   : Poppins, "Helvetica Neue", Helvetica, Arial, sans-serif;
			--font-family-headings  : "Libre Baskerville", "Helvetica Neue", Helvetica, Arial, sans-serif;
			--font-family-helvetica : "Helvetica Neue", Helvetica, Arial, sans-serif;

			/* Colour / theme related (hsl). I can't wait for Color Module Level 5 so this can be re-worked.
				WAITING FOR... https://12daysofweb.dev/2022/css-color-spaces-relative-color-syntax/
			*/
			--ui-green:                103 46% 48%;
			--ui-red:                  17 46% 48%;
			--black:                   0 0% 0%;
			--white:                   0 0% 100%;
			--brand-colour:            120 40% 40%;
			--brand-colour-contrast:   300 60% 60%;
		}

	/* # Base Elements */
		html {
			background-color: hsl( var(--white) );
			color           : hsl( var(--black) );
			accent-color    : var(--brand-colour, auto); /* https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color */
			font-size       : var(--font-size-root);
		}

		:where(body) {
			font-size: var(--font-size-base, 100%);
			line-height: 1.375;
			font-family: var(--font-family-primary);
			hyphens: none;
		}

		:where(p, h1, h2, h3, h4, h5, h6) {
			overflow-wrap: break-word; /* if a word needs to split on a long line, split it. */
		}

		sup       { vertical-align: top; font-size: .75em; }
		sub       { vertical-align: bottom; font-size: .75em; }
		strong    { font-weight: bold; }
		em        { font-style: italic; }
		code      { font: .85em/1 Courier, monospace; }

		a:link    { -webkit-tap-highlight-color: hsl( var(--ui-green) ); text-decoration: none; }
		a:link,
		a:visited { color: inherit; }
		a:hover   { color: hsl( var(--ui-green, 120 100% 47%) ); }
		a:focus,
		a:active  { outline-color: transparent; } /* Not "0 outline" as that wouldn't be accessible for high contrast etc */

		[id] {
			scroll-margin-top: 5vh; /* ensure there's a bit of headroom on all possible scroll targets */
		}

	/* # HTML "Components" - some newer HTML stuff are actually mark-up patterns more than individual elements */
		/* ## Details */
			details > summary {
				list-style-type: none;
				padding: 0.5em var(--gap) 0.25em 0; border: 1px solid transparent; border-bottom-color: currentColor;
				background: transparent url(/design-assets/images/plus.svg) 100% 5px no-repeat;
				cursor: pointer;
			}
			details > summary::-webkit-details-marker {
				display: none;
			}
			details > summary:focus {
				text-decoration: none;
			}
			details[open] > summary {
				background: transparent url(/design-assets/images/minus.svg) 100% 5px no-repeat;
			}
			details .content {
				padding: var(--gap, 1rem) 0;
			}

		/* ## Dialog */
			dialog.modal {
				position: sticky; inset: 0;
				max-width: 40ch; border: 0; padding: var(--gap);
				background-color: hsl( var(--black) / 0.2 );
				box-shadow: 0 0 var( --gap ) hsl( var(--black) / 0.6 );
				backdrop-filter: blur(10px);
			}

	/* # Image management */
		img                           { max-width: 100%; }
		a img                         { margin: 0; }
		img[data-object-fit="contain"] { object-fit: contain; }
		img[data-object-fit="cover"]   { object-fit: cover; }

		picture {
			display: flex;
		}
		picture > img {
			width: 100%; height: 100%;
		}

		/* loading spinner bg on <picture> elements */
			picture {
				background-color: hsl( var(--black) / 0.2 );
				position: relative;
			}
			picture > img {
				z-index: 1;
			}
			picture:before {
				position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%);
				content: ""; display: block; width: 3em; height: 3em; margin: 8px;
				border-radius: 50%; border: 0.5em solid #fff;
				border-color: #fff transparent #fff transparent;
				animation: loadingSpinner var(--slow, 0.9s) linear infinite;
			}
			@keyframes loadingSpinner {
				0%   { transform: translate(-50%,-50%) rotate(0deg); }
				100% { transform: translate(-50%,-50%) rotate(360deg); }
			}

		/* Only render images when in the viewport, we can assume any image inside <header> is already in the viewport
			REFERENCE: https://www.industrialempathy.com/posts/image-optimizations/
		*/
			main img,
			footer img {
				content-visibility: auto;
			}
}

@layer design {
	/*
		This is where you would add the CSS for your design.
		There is nothing here, so that the file can be duplicated easily as a starting place.
		Instead, the styles for the demo site are stored in `screen-demo.css` and are slotted into the design layer.
		Just removing that file brings things back to a "standard" blank starting position ready for any project.
	*/
}

@layer utilities {
	.uc_h1,
	.uc_h2,
	.uc_h3 {
		font-family:    var(--font-family-headings);
		font-weight:    bold;
		letter-spacing: var(--letter-spacing);
		text-wrap: balance;
	}

	.uc_h1 { font-size: var(--font-size-heading-large) }
	.uc_h2 { font-size: var(--font-size-heading) }
	.uc_h3 { font-size: var(--font-size-heading-small) }

	:where(.uc_uppercase) {
		text-transform: uppercase;
		letter-spacing: calc( (var(--ps-letter-spacing, 40) / 1000) * 1em );
	}
	:where(.uc_uppercase-adjusted) { /* Upper case characters sized down to look visually the same height as lower */
		text-transform: uppercase;
		letter-spacing: calc( (var(--ps-letter-spacing, 40) / 1000) * 1em );
		font-size: 0.875em;
	}

	:where(.uc_hide-visually):not(:focus):not(:active) { /* screen readers still get the content */
		/* Source:
		   https://www.tpgi.com/the-anatomy-of-visually-hidden/
			 https://www.a11yproject.com/posts/how-to-hide-content/ */
		position: absolute;
		height: 1px; width: 1px; clip-path: inset(50%);
		overflow: hidden; white-space: nowrap;
	}

	:where(.uc_hide-for-everyone) { /* screen readers also get the content hidden */
		display: none !important;
	}

	:where(.uc_button) {
		display: inline-flex; align-items: center; gap: calc( var(--gap) / 2 );
		padding: calc( var(--gap) / 2 ); border-radius: 0.5em;
		background-color: hsl( var(--brand-colour) / 0.25 );
		font-size: 0.875em; text-transform: uppercase; letter-spacing: calc( (var(--ps-letter-spacing, 40) / 1000) * 1em );
		color: hsl( var(--white) ) !important;
		transition: background-color, var(--fast);
	}
	:where(.uc_button):hover {
		background-color: hsl( var(--brand-colour) / 1 );
	}
}